import streamlit as st
import pandas as pd
import numpy as np
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4, landscape
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
import tempfile
import os
from datetime import datetime

# Configuration de la page
st.set_page_config(
    page_title="√âvaluation Diversit√© et Inclusion V2",
    page_icon="üìä",
    layout="wide"
)

# Styles pour le PDF
styles = getSampleStyleSheet()
title_style = ParagraphStyle(
    'CustomTitle',
    parent=styles['Heading1'],
    fontSize=24,
    spaceAfter=30,
    textColor=colors.HexColor('#4472C4')
)

heading_style = ParagraphStyle(
    'CustomHeading',
    parent=styles['Heading2'],
    fontSize=16,
    spaceAfter=12,
    textColor=colors.HexColor('#4472C4')
)

# Fonction pour g√©n√©rer le PDF
def generate_pdf(data, company_name, year):
    # Cr√©er un fichier temporaire
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
    
    # Configuration du document
    doc = SimpleDocTemplate(
        temp_file.name,
        pagesize=landscape(A4),
        rightMargin=30,
        leftMargin=30,
        topMargin=30,
        bottomMargin=30
    )
    
    # Liste des √©l√©ments du document
    elements = []
    
    # En-t√™te
    elements.append(Paragraph(f"Rapport d'√âvaluation Diversit√© et Inclusion", title_style))
    elements.append(Paragraph(f"{company_name} - {year}", heading_style))
    elements.append(Paragraph(f"Date de g√©n√©ration : {datetime.now().strftime('%d/%m/%Y')}", styles['Normal']))
    elements.append(Spacer(1, 20))
    
    # R√©sum√© ex√©cutif
    elements.append(Paragraph("R√©sum√© Ex√©cutif", heading_style))
    elements.append(Paragraph(
        f"Ce rapport pr√©sente une analyse d√©taill√©e de la diversit√© et de l'inclusion dans votre entreprise. "
        f"Les r√©sultats montrent des points forts et des axes d'am√©lioration qui sont d√©taill√©s dans les sections suivantes.",
        styles['Normal']
    ))
    elements.append(Spacer(1, 20))
    
    # Score global
    elements.append(Paragraph("Score Global", heading_style))
    score_data = [
        ['Indicateur', 'Valeur', 'Objectif', 'Statut', 'Explication'],
        ['Taux de f√©minisation', f"{data['feminization_rate']:.1f}%", '40%', '‚úÖ' if data['feminization_rate'] >= 40 else '‚ö†Ô∏è',
         'Pourcentage de femmes dans l\'effectif total'],
        ['Taux de femmes cadres', f"{data['female_executives_rate']:.1f}%", '40%', '‚úÖ' if data['female_executives_rate'] >= 40 else '‚ö†Ô∏è',
         'Pourcentage de femmes parmi les postes cadres'],
        ['Taux d\'emploi des personnes en situation de handicap', f"{data['disability_rate']:.1f}%", '6%', '‚úÖ' if data['disability_rate'] >= 6 else '‚ö†Ô∏è',
         'Pourcentage de salari√©s en situation de handicap'],
        ['√âcart de r√©mun√©ration', f"{data['salary_gap']:.1f}%", '<5%', '‚úÖ' if data['salary_gap'] <= 5 else '‚ö†Ô∏è',
         '√âcart moyen de r√©mun√©ration entre hommes et femmes'],
        ['Score d\'√©quilibre des √¢ges', f"{data['age_balance']:.1f}%", '>70%', '‚úÖ' if data['age_balance'] >= 70 else '‚ö†Ô∏è',
         'Mesure de la diversit√© des √¢ges'],
        ['Taux d\'absent√©isme', f"{data['absenteeism_rate']:.1f}%", '<4%', '‚úÖ' if data['absenteeism_rate'] <= 4 else '‚ö†Ô∏è',
         'Taux d\'absence par rapport aux jours travaill√©s'],
        ['Taux de CDI', f"{data['cdi_rate']:.1f}%", '>80%', '‚úÖ' if data['cdi_rate'] >= 80 else '‚ö†Ô∏è',
         'Pourcentage de contrats CDI dans l\'effectif'],
        ['Taux de formation', f"{data['training_rate']:.1f}%", '>5%', '‚úÖ' if data['training_rate'] >= 5 else '‚ö†Ô∏è',
         'Taux de participation aux formations'],
        ['Taux de recrutement interne', f"{data['internal_recruitment_rate']:.1f}%", '>30%', '‚úÖ' if data['internal_recruitment_rate'] >= 30 else '‚ö†Ô∏è',
         'Pourcentage de promotions internes']
    ]
    
    score_table = Table(score_data, colWidths=[2*inch, 1.5*inch, 1.5*inch, 1*inch, 3*inch])
    score_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#4472C4')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('ALIGN', (4, 0), (4, -1), 'LEFT'),
    ]))
    elements.append(score_table)
    elements.append(Spacer(1, 20))
    
    # Points forts
    elements.append(Paragraph("Points Forts", heading_style))
    strengths = []
    if data['feminization_rate'] >= 40:
        strengths.append("Un bon taux de f√©minisation global")
    if data['female_executives_rate'] >= 40:
        strengths.append("Une bonne repr√©sentation des femmes dans les postes cadres")
    if data['disability_rate'] >= 6:
        strengths.append("Un taux d'emploi des personnes en situation de handicap conforme √† la loi")
    if data['salary_gap'] <= 5:
        strengths.append("Des √©carts de r√©mun√©ration ma√Ætris√©s")
    if data['age_balance'] >= 70:
        strengths.append("Une bonne r√©partition des √¢ges")
    if data['absenteeism_rate'] <= 4:
        strengths.append("Un taux d'absent√©isme ma√Ætris√©")
    if data['cdi_rate'] >= 80:
        strengths.append("Une forte proportion de contrats CDI")
    if data['training_rate'] >= 5:
        strengths.append("Un bon taux de participation aux formations")
    if data['internal_recruitment_rate'] >= 30:
        strengths.append("Une bonne politique de promotion interne")
    
    if strengths:
        for strength in strengths:
            elements.append(Paragraph(f"‚Ä¢ {strength}", styles['Normal']))
    else:
        elements.append(Paragraph("Aucun point fort significatif identifi√©", styles['Normal']))
    elements.append(Spacer(1, 20))
    
    # Axes d'am√©lioration
    elements.append(Paragraph("Axes d'Am√©lioration", heading_style))
    improvements = []
    if data['feminization_rate'] < 40:
        improvements.append("Augmenter le taux de f√©minisation global")
    if data['female_executives_rate'] < 40:
        improvements.append("D√©velopper la pr√©sence des femmes dans les postes cadres")
    if data['disability_rate'] < 6:
        improvements.append("Atteindre le taux l√©gal d'emploi des personnes en situation de handicap")
    if data['salary_gap'] > 5:
        improvements.append("R√©duire les √©carts de r√©mun√©ration entre les hommes et les femmes")
    if data['age_balance'] < 70:
        improvements.append("Am√©liorer l'√©quilibre des √¢ges dans l'entreprise")
    if data['absenteeism_rate'] > 4:
        improvements.append("Mettre en place des actions pour r√©duire l'absent√©isme")
    if data['cdi_rate'] < 80:
        improvements.append("Augmenter la proportion de contrats CDI")
    if data['training_rate'] < 5:
        improvements.append("D√©velopper la participation aux formations")
    if data['internal_recruitment_rate'] < 30:
        improvements.append("Renforcer la politique de promotion interne")
    
    for improvement in improvements:
        elements.append(Paragraph(f"‚Ä¢ {improvement}", styles['Normal']))
    elements.append(Spacer(1, 20))
    
    # Plan d'action
    elements.append(Paragraph("Plan d'Action Recommand√©", heading_style))
    action_plan = [
        ['Priorit√©', 'Action', 'Objectif', 'D√©lai'],
        ['Haute', 'Mise en place d\'un plan de recrutement cibl√©', 'Augmenter la diversit√©', '6 mois'],
        ['Haute', 'Formation des managers √† la diversit√©', 'Sensibilisation', '3 mois'],
        ['Moyenne', 'Audit des r√©mun√©rations', 'R√©duire les √©carts', '12 mois'],
        ['Moyenne', 'Programme de mentorat', 'D√©veloppement des talents', 'Ongoing'],
        ['Basse', '√âtude de l\'absent√©isme', 'Comprendre les causes', '3 mois'],
        ['Moyenne', 'D√©veloppement de la formation continue', 'Augmenter la participation', '6 mois'],
        ['Moyenne', 'Plan de d√©veloppement des carri√®res', 'Favoriser les promotions internes', '12 mois']
    ]
    
    action_table = Table(action_plan, colWidths=[1.5*inch, 3*inch, 2*inch, 1.5*inch])
    action_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#4472C4')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
    ]))
    elements.append(action_table)
    elements.append(Spacer(1, 20))
    
    # Conclusion
    elements.append(Paragraph("Conclusion", heading_style))
    conclusion = (
        f"L'analyse de la diversit√© et de l'inclusion dans {company_name} r√©v√®le des opportunit√©s "
        "d'am√©lioration significatives. En mettant en ≈ìuvre les actions recommand√©es, "
        "l'entreprise pourra renforcer sa performance sociale et sa comp√©titivit√©. "
        "Un suivi r√©gulier des indicateurs permettra de mesurer les progr√®s accomplis."
    )
    elements.append(Paragraph(conclusion, styles['Normal']))
    
    # Pied de page
    elements.append(Spacer(1, 30))
    elements.append(Paragraph(
        "Ce rapport a √©t√© g√©n√©r√© automatiquement par l'application d'√©valuation de la Diversit√© et Inclusion",
        ParagraphStyle(
            'Footer',
            parent=styles['Normal'],
            fontSize=8,
            textColor=colors.gray
        )
    ))
    
    # G√©n√©ration du PDF
    doc.build(elements)
    return temp_file.name

# Interface Streamlit
st.title("üìä √âvaluation de la Diversit√© et Inclusion V2")

# Section pour t√©l√©charger le mod√®le
st.header("1. T√©l√©charger le mod√®le")
st.write("Commencez par t√©l√©charger notre mod√®le Excel complet pour saisir vos donn√©es.")
if st.button("üì• T√©l√©charger le mod√®le Excel"):
    with open('modele_bilan_social_v2.xlsx', 'rb') as f:
        st.download_button(
            label="Cliquez pour t√©l√©charger",
            data=f,
            file_name="modele_bilan_social_v2.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

# Section pour importer les donn√©es
st.header("2. Importer vos donn√©es")
st.write("Une fois le mod√®le compl√©t√©, importez-le ici pour g√©n√©rer votre rapport.")
uploaded_file = st.file_uploader("Choisissez votre fichier Excel", type=['xlsx', 'xls'])

if uploaded_file is not None:
    try:
        # Lecture des donn√©es
        df_general = pd.read_excel(uploaded_file, sheet_name='Donn√©es g√©n√©rales')
        df_age = pd.read_excel(uploaded_file, sheet_name='R√©partition par √¢ge')
        df_remuneration = pd.read_excel(uploaded_file, sheet_name='R√©mun√©rations')
        df_formation = pd.read_excel(uploaded_file, sheet_name='Formation et Recrutement')
        
        # Extraction des donn√©es
        company_name = df_general.iloc[0, 1]
        year = df_general.iloc[1, 1]
        total_employees = df_general.iloc[2, 1]
        women_count = df_general.iloc[3, 1]
        men_count = df_general.iloc[4, 1]
        executives_count = df_general.iloc[5, 1]
        women_executives = df_general.iloc[6, 1]
        disabled_employees = df_general.iloc[7, 1]
        working_days = df_general.iloc[8, 1]
        absence_days = df_general.iloc[9, 1]
        cdi_count = df_general.iloc[10, 1]
        
        # Calcul des indicateurs
        data = {
            'feminization_rate': (women_count / total_employees) * 100,
            'female_executives_rate': (women_executives / executives_count) * 100,
            'disability_rate': (disabled_employees / total_employees) * 100,
            'salary_gap': df_remuneration['√âcart (%)'].mean(),
            'age_balance': (df_age['Total'].std() / df_age['Total'].mean()) * 100,
            'absenteeism_rate': (absence_days / working_days) * 100,
            'cdi_rate': (cdi_count / total_employees) * 100,
            'training_rate': (df_formation.iloc[0, 1] / total_employees) * 100,
            'internal_recruitment_rate': (df_formation.iloc[4, 1] / df_formation.iloc[3, 1]) * 100
        }
        
        # Affichage des r√©sultats
        st.header("3. R√©sultats de l'√©valuation")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Indicateurs cl√©s")
            st.metric("Taux de f√©minisation", f"{data['feminization_rate']:.1f}%")
            st.metric("Taux de femmes cadres", f"{data['female_executives_rate']:.1f}%")
            st.metric("Taux d'emploi des personnes en situation de handicap", f"{data['disability_rate']:.1f}%")
            st.metric("√âcart de r√©mun√©ration", f"{data['salary_gap']:.1f}%")
        
        with col2:
            st.subheader("Autres indicateurs")
            st.metric("Score d'√©quilibre des √¢ges", f"{data['age_balance']:.1f}%")
            st.metric("Taux d'absent√©isme", f"{data['absenteeism_rate']:.1f}%")
            st.metric("Taux de CDI", f"{data['cdi_rate']:.1f}%")
            st.metric("Taux de formation", f"{data['training_rate']:.1f}%")
            st.metric("Taux de recrutement interne", f"{data['internal_recruitment_rate']:.1f}%")
        
        # G√©n√©ration du PDF
        if st.button("üìÑ G√©n√©rer le rapport PDF"):
            pdf_path = generate_pdf(data, company_name, year)
            with open(pdf_path, 'rb') as f:
                st.download_button(
                    label="üì• T√©l√©charger le rapport PDF",
                    data=f,
                    file_name=f"rapport_diversite_{company_name}_{year}.pdf",
                    mime="application/pdf"
                )
            os.unlink(pdf_path)  # Suppression du fichier temporaire
    
    except Exception as e:
        st.error(f"Une erreur est survenue lors du traitement du fichier : {str(e)}")
        st.write("Veuillez v√©rifier que le fichier correspond bien au mod√®le fourni.")
